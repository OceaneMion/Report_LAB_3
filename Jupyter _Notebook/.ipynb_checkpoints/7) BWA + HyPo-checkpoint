{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNeGfEnHDt0FqzJMCUvYd2g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# What is the use of Polishing ?"],"metadata":{"id":"_8gkCBKP6Q4J"}},{"cell_type":"markdown","source":["* Polishing used short illumina reads that were mapped on their respective assemblies (constructed from long reads), to improve overall genome assemblies (contiguity, completness...).\n","\n","* Before doing polishing we need to index and map our assemblies to its respective long reads. We used bwa-mem2 for this purpose."],"metadata":{"id":"Wwdn419R6Y08"}},{"cell_type":"markdown","source":["# BWA"],"metadata":{"id":"3mKcBxG_PiDX"}},{"cell_type":"markdown","source":["## Indexing"],"metadata":{"id":"fsZLVxwBK1TJ"}},{"cell_type":"code","source":["#!/bin/bash (CODE CORRECT DEJA VERIFIER) ## INDEX\n","\n","mkdir -p /bigvol/omion/05-Polishing/BWA-MEM2/Indexing/{Dorado,Guppy}/{modbasecalling,basecalling}\n","\n","for i in /bigvol/omion/04-Flye/*/*/*/assembly.fasta; do\n","    if [ -f \"$i\" ]; then\n","        directory=$(dirname \"$i\")\n","        gd_part=$(basename \"$directory\")\n","\n","        # Extract the basecalling method (Dorado or Guppy) and type (modbasecalling or basecalling)\n","        basecalling_method=$(echo \"$directory\" | awk -F'/' '{print $(NF-2)}')\n","        basecalling_type=$(echo \"$directory\" | awk -F'/' '{print $(NF-1)}')\n","\n","        # Create the output directory path\n","        output_dir=\"/bigvol/omion/05-Polishing/BWA-MEM2/Indexing/${basecalling_method}/${basecalling_type}/${gd_part}\"\n","\n","        # Create the output directory if it doesn't exist\n","        mkdir -p \"${output_dir}\"\n","\n","        # Copy the assembly.fasta to the output directory\n","        cp \"$i\" \"${output_dir}/assembly.fasta\"\n","\n","        # Change to the output directory\n","        cd \"${output_dir}\"\n","\n","        # Run BWA-MEM2 index\n","        bwa-mem2 index assembly.fasta\n","\n","        echo \"Indexed $i. Output in ${output_dir}\"\n","\n","        # Change back to the original directory\n","        cd - > /dev/null\n","    fi\n","done\n"],"metadata":{"id":"PBNL7t62BHuB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Mapping"],"metadata":{"id":"ZEKZxB5mK4bb"}},{"cell_type":"code","source":["#!/bin/bash (CODE EN TRAIN DE RUN)\n","\n","mkdir -p /bigvol/omion/05-Polishing/BWA-MEM2/Mapping/{Dorado,Guppy}/{modbasecalling,basecalling}\n","\n","for i in /bigvol/omion/05-Polishing/BWA-MEM2/Indexing/*/*/Gd*/assembly.fasta; do\n","    if [ -f \"$i\" ]; then\n","        directory=$(dirname \"$i\")\n","        gd_part=$(basename \"$directory\")\n","\n","        # Extract the basecalling method (Dorado or Guppy) and type (modbasecalling or basecalling)\n","        basecalling_method=$(echo \"$directory\" | awk -F'/' '{print $(NF-2)}')\n","        basecalling_type=$(echo \"$directory\" | awk -F'/' '{print $(NF-1)}')\n","\n","        # Create the output directory path\n","        output_dir=\"/bigvol/omion/05-Polishing/BWA-MEM2/Mapping/${basecalling_method}/${basecalling_type}/${gd_part}\"\n","\n","        # Create the output directory if it doesn't exist\n","        mkdir -p \"${output_dir}\"\n","\n","        # Extract the Gd number from the gd_part\n","        gd_number=$(echo \"$gd_part\" | grep -oP 'Gd\\K[0-9]+')\n","\n","        echo \"Processing $gd_part (number: $gd_number)\"\n","\n","        # Find all potential matching Illumina folders\n","        illumina_folder=$(find /bigvol/shared_FunAdapt/00-illumina_Nanopore/illumina_shortreads -type d -name \"Gd_*${gd_number}*\" | head -n 1)\n","\n","        if [ -z \"$illumina_folder\" ]; then\n","            echo \"No matching Illumina folder found for $gd_part\"\n","        else\n","            echo \"Found Illumina folder: $illumina_folder\"\n","\n","            # List contents of the Illumina folder\n","            echo \"Contents of $illumina_folder:\"\n","            ls -l \"$illumina_folder\"\n","\n","            # Find the Illumina files with various naming conventions\n","            illumina_file1=$(find \"$illumina_folder\" -type f \\( -name \"*_R1.fastq.gz\" -o -name \"*_1.fq.gz\" -o -name \"*_1.fastq\" -o -name \"*_1.fastq.gz\" \\) | head -n 1)\n","            illumina_file2=$(find \"$illumina_folder\" -type f \\( -name \"*_R2.fastq.gz\" -o -name \"*_2.fq.gz\" -o -name \"*_2.fastq\" -o -name \"*_2.fastq.gz\" \\) | head -n 1)\n","\n","            if [ -f \"$illumina_file1\" ] && [ -f \"$illumina_file2\" ]; then\n","                echo \"Found Illumina files:\"\n","                echo \"File 1: $illumina_file1\"\n","                echo \"File 2: $illumina_file2\"\n","\n","                # Run BWA-MEM2 mapping\n","                echo \"Running BWA-MEM2 mapping...\"\n","                bwa-mem2 mem -t 80 \"$i\" \"$illumina_file1\" \"$illumina_file2\" > \"${output_dir}/bwa_mapping_${gd_part}.sam\"\n","\n","                echo \"Mapping completed. Output in ${output_dir}/bwa_mapping_${gd_part}.sam\"\n","            else\n","                echo \"Illumina files not found in $illumina_folder\"\n","                echo \"Searched for patterns: *_R1.fastq.gz, *_R2.fastq.gz, *_1.fq.gz, *_2.fq.gz, *_1.fastq, *_2.fastq, *_1.fastq.gz, *_2.fastq.gz\"\n","            fi\n","        fi\n","\n","        echo \"----------------------------------------\"\n","    fi\n","done"],"metadata":{"id":"5PXEt8EmEuZR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Bwa-mem2 will output sam file, that we need to convert to bam for further processing."],"metadata":{"id":"m6vAYlnl7Gh_"}},{"cell_type":"markdown","source":["# Conversion SAM to BAM"],"metadata":{"id":"xIooOsuqLGzm"}},{"cell_type":"code","source":["## Convertion SAM to BAM (CODE QUI MARCHE DEJA REVERIFIER)\n","$ for file in /bigvol/omion/05-Polishing/BWA-MEM2/Mapping/*/*/Gd*/bwa_mapping_Gd*.sam; do\n","    output=\"${file%.sam}.bam\"\n","    samtools view -bS \"$file\" --threads 80 > \"$output\"\n","done\n","\n","\n","## Sorting (CODE QUI MARCHE)\n","for basecaller in /bigvol/omion/05-Polishing/BWA-MEM2/Mapping/*; do\n","    basecaller_name=$(basename \"$basecaller\")\n","    for mode in \"$basecaller\"/*; do\n","        mode_name=$(basename \"$mode\")\n","        for file in \"$mode\"/Gd*/bwa_mapping_Gd*.bam; do\n","            if [ -f \"$file\" ]; then\n","                dir=$(dirname \"$file\")\n","                sample=$(basename \"$file\" | cut -d'_' -f3)\n","                output_file=\"$dir/sorted_bwa_mapping_${sample}_${basecaller_name}_${mode_name}.bam\"\n","                samtools sort -o \"$output_file\" \"$file\" --threads 80\n","                echo \"Sorted and renamed: $output_file\"\n","            fi\n","        done\n","    done\n","done"],"metadata":{"id":"ZJPZjgVrkoPX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Estimation of genome size and coverage (CODE VERIFIER qui MARCHE (mettre deux chiffre apr√®s la virgule))\n","\n","#!/bin/bash\n","\n","# Directory containing BAM files\n","directory=\"/bigvol/omion/05-Polishing/BWA-MEM2/Mapping/*/*/Gd*/\"\n","\n","# Output header\n","echo -e \"FileName\\tValue\\tAverage\"\n","\n","# Process each BAM file\n","for bamfile in $directory/sorted_bwa_mapping_Gd*.bam; do\n","    # Extract the file name without extension and remove the prefix\n","    filename=$(basename \"$bamfile\" .bam)\n","    filename=${filename#sorted_bwa_mapping_}\n","\n","    # Calculate the sum of values from the header\n","    value=$(samtools view -H \"$bamfile\" --threads 80 | grep -P '^@SQ' | cut -f 3 -d ':' | awk '{sum+=$1} END {print sum}')\n","\n","    # Calculate the depth sum and the average\n","    depth_sum=$(samtools depth \"$bamfile\" --threads 80 | awk '{sum+=$3} END {print sum}')\n","    average=$(echo \"$depth_sum / $value\" | bc -l)\n","\n","    # Print the file name, the calculated value, and the average\n","    echo -e \"$filename\\t$value\\t$average\"\n","done\n"],"metadata":{"id":"eW_X8sr-1TLN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["A table was created from the output. The first column contain isolate name, the second the genome size, and the third the coverage estimation."],"metadata":{"id":"1tqycPBZoi6i"}},{"cell_type":"markdown","source":["# HyPo : Polishing of Flye Assembly using short Illumina reads"],"metadata":{"id":"eZMn2ZtHtu1B"}},{"cell_type":"code","source":["#!/bin/bash (CODE QUI MARCHE POUR HYPO)\n","\n","# Path to the data file containing genome size + coverage\n","data_file=\"/bigvol/omion/05-Polishing/genome_size_coverage.txt\"\n","\n","# Directories containing input files\n","fq_dir=\"/bigvol/shared_FunAdapt/00-illumina_Nanopore/illumina_shortreads\"\n","index_dir=\"/bigvol/omion/05-Polishing/BWA-MEM2/Indexing/\"\n","mapping_dir=\"/bigvol/omion/05-Polishing/BWA-MEM2/Mapping/\"\n","\n","# Number of threads to use\n","threads=80\n","\n","# Read the data file into an associative array\n","declare -A data_map\n","while IFS=$'\\t' read -r filename size coverage; do\n","    data_map[\"$filename\"]=\"$size $coverage\"\n","done < \"$data_file\"\n","\n","# Output header\n","echo -e \"FileName\\tValue\\tAverage\"\n","\n","# Process each fasta and bam file\n","for fasta in ${index_dir}/*/*/Gd*/assembly_Gd*.fasta; do\n","    # Extract the identifier (e.g., Gd2407_Guppy_modbasecalling) from the filename\n","    identifier=$(basename \"$fasta\" .fasta | sed 's/assembly_//')\n","\n","    # Find the corresponding BAM file\n","    bam_file=$(find ${mapping_dir}/*/*/Gd*/ -name \"sorted_bwa_mapping_${identifier}.bam\")\n","    if [[ -z \"$bam_file\" ]]; then\n","        echo \"No BAM file found for identifier $identifier\"\n","        continue\n","    fi\n","\n","    # Extract the Gd part from the directory path\n","    directory=$(dirname \"$fasta\")\n","    gd_part=$(basename \"$directory\")\n","\n","    # Extract the Gd number from the gd_part\n","    gd_number=$(echo \"$gd_part\" | grep -oP 'Gd\\K[0-9]+')\n","\n","    # Find the correct folder for FASTQ files\n","    illumina_folder=$(find ${fq_dir} -type d -name \"Gd_*${gd_number}*\" | head -n 1)\n","    if [[ -z \"$illumina_folder\" ]]; then\n","        echo \"No matching Illumina folder found for $gd_part\"\n","        continue\n","    fi\n","\n","    echo \"Found Illumina folder: $illumina_folder\"\n","    echo \"Contents of $illumina_folder:\"\n","    ls -l \"$illumina_folder\"\n","\n","    # Find the Illumina files with various naming conventions\n","    illumina_file1=$(find \"$illumina_folder\" -type f \\( -name \"*_R1.fastq.gz\" -o -name \"*_1.fq.gz\" -o -name \"*_1.fastq\" -o -name \"*_1.fastq.gz\" \\) | head -n 1)\n","    illumina_file2=$(find \"$illumina_folder\" -type f \\( -name \"*_R2.fastq.gz\" -o -name \"*_2.fq.gz\" -o -name \"*_2.fastq\" -o -name \"*_2.fastq.gz\" \\) | head -n 1)\n","\n","    if [[ -z \"$illumina_file1\" || -z \"$illumina_file2\" ]]; then\n","        echo \"Illumina files not found for $identifier\"\n","        continue\n","    fi\n","\n","    echo \"Found Illumina files:\"\n","    echo \"File 1: $illumina_file1\"\n","    echo \"File 2: $illumina_file2\"\n","\n","    # Get the values from the data file\n","    if [[ -n \"${data_map[$identifier]}\" ]]; then\n","        size=$(echo \"${data_map[$identifier]}\" | awk '{print $1}')\n","        coverage=$(echo \"${data_map[$identifier]}\" | awk '{print $2}')\n","    else\n","        echo \"No data found for identifier $identifier\"\n","        continue\n","    fi\n","\n","    # Execute the hypo command\n","    hypo -r \"$illumina_file1\" \"$illumina_file2\" \\\n","         -d \"$fasta\" \\\n","         -b \"$bam_file\" \\\n","         -c \"$coverage\" \\\n","         -s \"${size}m\" \\\n","         -t \"$threads\"\n","done\n"],"metadata":{"id":"n8htaKCs0OWh"},"execution_count":null,"outputs":[]}]}